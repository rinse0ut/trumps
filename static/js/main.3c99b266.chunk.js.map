{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["CATEGORIES","META_DATA","category","title","subCategories","DATA","name","countryCode","values","PLAYER1_RESULT","PLAYER2_RESULT","CardComponent","props","console","log","player","categoryIndex","result","onTurn","Table","celled","selectable","unstackable","size","Header","Row","HeaderCell","colSpan","toUpperCase","textAlign","Flag","Body","Cell","Image","src","map","i","metaData","find","x","value","stat","warning","key","onClick","Icon","positive","negative","App","useState","currentPlayer","setCurrentPlayer","player1Stack","setPlayer1Stack","player2Stack","setPlayer2Stack","drawnStack","setDrawnStack","setCategoryIndex","setResult","useEffect","numCards","length","Math","floor","random","index","splice","item","prevState","handleTurn","useCallback","player1Card","player2Card","player1Value","player2Value","_player1Stack","slice","_player2Stack","useGame","Container","Segment","inverted","color","as","categories","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3c99b266.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { Container, Table, Image, Flag, FlagNameValues, Segment, Header, Icon } from 'semantic-ui-react';\n\ntype CategoryType = 'status' | 'banter' | 'weight' | 'chess' | 'rounds';\n\ntype CardType = {\n  name: string;\n  countryCode: FlagNameValues;\n  values: number[];\n}\n\nconst CATEGORIES: CategoryType[] = ['status', 'banter', 'weight', 'chess', 'rounds'];\n\nconst META_DATA = [\n  {\n    category: 'status',\n    title: 'Status',\n    subCategories: ['🐌', '🛎', '🛋', '🐿', '🌎 🚀'],\n  },\n  {\n    category: 'banter',\n    title: 'Banter Level',\n    subCategories: ['GNVQ', 'GCSE', 'A Level', 'Archbishop'],\n  },\n  {\n    category: 'weight',\n    title: 'Weight (kg)',\n  },\n  {\n    category: 'chess',\n    title: 'Chess Rating',\n  },\n  {\n    category: 'rounds',\n    title: 'Drink Rounds',\n  },\n]\n\nconst DATA: CardType[] = [\n  {\n    name: 'Dan',\n    countryCode: 'uk',\n    values: [2, 1, 125, 640, 5, 5]\n  },\n  {\n    name: 'Mike',\n    countryCode: 'uk',\n    values: [0, 2, 3, 400, 5]\n  },\n  {\n    name: 'Grant',\n    countryCode: 'gb wls',\n    values: [3, 2, 3, 0, 5]\n  },\n  {\n    name: 'Will',\n    countryCode: 'gb sct',\n    values: [1, 2, 3, 700, 5]\n  },\n];\n\nfunction delay(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\ntype PlayerType = 1 | 2;\ntype ResultType = null | 0 | 1 | 2;\n\nconst PLAYER1_RESULT = ['DRAWS!', 'WINS!', 'LOSES!']\nconst PLAYER2_RESULT = ['DRAWS!', 'LOSES!', 'WINS!']\n\nfunction useGame() {\n  const [currentPlayer, setCurrentPlayer] = useState<1 | 2>(1);\n  const [player1Stack, setPlayer1Stack] = useState<CardType[]>([]);\n  const [player2Stack, setPlayer2Stack] = useState<CardType[]>([]);\n  const [drawnStack, setDrawnStack] = useState<CardType[]>([]);\n  const [showCard, setShowCard] = useState<boolean>(false);\n  const [categoryIndex, setCategoryIndex] = useState<number | null>(null);\n  const [result, setResult] = useState<ResultType>(null);\n\n  // Shuffle and setup each player decks\n  useEffect(() => {\n    const numCards = DATA.length / 2;\n    const index = Math.floor(Math.random() * numCards);\n    for (let i = 0; i < numCards; i++) {\n      const index = Math.floor(Math.random() * numCards);\n      const [item] = DATA.splice(index, 1);\n      setPlayer1Stack(prevState => [...prevState, item]);\n    }\n    setPlayer2Stack(DATA);\n  }, [])\n\n  // const handleTurn = useCallback((categoryIndex: number) => {\n  //   setShowCard(true);\n  //   delay(1).then(() => {\n  //     // setShowCard(false);\n  //     setCategoryIndex(categoryIndex)\n  //   });\n  // }, [player1Stack, player2Stack, drawnStack]);\n\n  const handleTurn = useCallback((categoryIndex: number) => {\n    const player1Card = player1Stack[0];\n    const player2Card = player2Stack[0];\n    const player1Value = player1Card['values'][categoryIndex];\n    const player2Value = player2Card['values'][categoryIndex];\n    const _player1Stack = player1Stack.slice(1);\n    const _player2Stack = player2Stack.slice(1);\n\n    setResult(null);\n    setCategoryIndex(categoryIndex);\n\n    if (player1Value > player2Value) {\n      setPlayer1Stack([..._player1Stack, player2Card, player1Card, ...drawnStack]);\n      setPlayer2Stack([..._player2Stack]);\n      setDrawnStack([]);\n      setCurrentPlayer(1);\n      setResult(1);\n    } else if (player1Value < player2Value) {\n      setPlayer1Stack([..._player1Stack]);\n      setPlayer2Stack([..._player2Stack, player2Card, player1Card, ...drawnStack]);\n      setDrawnStack([]);\n      setCurrentPlayer(2);\n      setResult(2);\n    } else {\n      setPlayer1Stack([..._player1Stack]);\n      setPlayer2Stack([..._player2Stack]);\n      setDrawnStack([...drawnStack, player2Card, player1Card]);\n      setResult(0);\n    }\n  }, [player1Stack, player2Stack, drawnStack, categoryIndex, result])\n\n  return { currentPlayer, categoryIndex, result, player1Stack, player2Stack, drawnStack, handleTurn }\n}\n\nfunction App() {\n\n  const {\n    currentPlayer,\n    player1Stack,\n    player2Stack,\n    drawnStack,\n    categoryIndex,\n    result,\n    handleTurn\n  } = useGame();\n\n  console.log('1UP STACK', player1Stack);\n  console.log('2UP STACK', player2Stack);\n  console.log('DRAWN STACK', drawnStack);\n  console.log('RESULT', result);\n  if (player1Stack.length === 0 && player2Stack.length === 0) {\n    return (<h1>ITS A DRAW!</h1>);\n  }\n  if (player1Stack.length === 0) {\n    return (<h1>2UP WINS!</h1>);\n  }\n  if (player2Stack.length === 0) {\n    return (<h1>1UP WINS!</h1>);\n  }\n  // return (\n  //   <Container>\n  //     {/* <Segment inverted color='red'>Player {currentPlayer}</Segment> */}\n  //     <Segment color='red'><Header as='h1'>Player {currentPlayer} Go!</Header></Segment>\n  //     <CardComponent categories={CATEGORIES} onTurn={handleTurn} {...player1Stack[0]} />\n  //     {/* <CardComponent categories={CATEGORIES} onTurn={handleTurn} {...player1Stack[1]} />\n  //     <CardComponent categories={CATEGORIES} onTurn={handleTurn} {...player2Stack[0]} />\n  //     <CardComponent categories={CATEGORIES} onTurn={handleTurn} {...player2Stack[1]} /> */}\n  //   </Container>\n  // );  \n  return (\n    <Container>\n      {/* <h1>Player 1 ({player1Stack.length} Cards)</h1> */}\n      <Segment inverted color='red'><Header as='h2'>Player 1 {result && PLAYER1_RESULT[result]}</Header></Segment>\n      {currentPlayer === 1 || result\n        ? <CardComponent\n          categories={CATEGORIES}\n          categoryIndex={categoryIndex}\n          player={1}\n          result={result}\n          onTurn={handleTurn}\n          {...player1Stack[0]} /> : null}\n      <Segment inverted color='blue'><Header as='h2'>Player 2 {result && PLAYER2_RESULT[result]}</Header></Segment>\n      {currentPlayer === 2 || result\n        ? <CardComponent\n          categories={CATEGORIES}\n          categoryIndex={categoryIndex}\n          player={2}\n          result={result}\n          onTurn={handleTurn}\n          {...player2Stack[0]} /> : null}\n    </Container>\n  );\n}\n\nfunction player1Result(result: ResultType) {\n  if (result === 1) {\n    return 'WINS!';\n  } else if (result === 2) {\n    return 'LOSES!'\n  } else {\n    return 'DRAWS!'\n  }\n}\n\ntype CardPropsType = CardType & {\n  categories: CategoryType[];\n  categoryIndex: number | null;\n  player: PlayerType;\n  result: number | null;\n  onTurn: (categoryIndex: number) => void;\n}\n\nfunction CardComponent(props: CardPropsType) {\n  console.log('CARD PROPS', props);\n  const { name, countryCode, values, player, categoryIndex, result, onTurn } = props;\n  return (\n    <Table celled selectable unstackable size=\"small\">\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell colSpan='2'>{name.toUpperCase()}</Table.HeaderCell>\n          <Table.HeaderCell textAlign='center'>\n            <Flag name={countryCode} />\n          </Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        <Table.Row>\n          <Table.Cell>\n            <Image src='https://react.semantic-ui.com/images/avatar/large/matthew.png' size='small' />\n          </Table.Cell>\n        </Table.Row>\n        {CATEGORIES.map((category, i) => {\n          const metaData = META_DATA.find(x => x.category === category);\n          console.log('META', metaData);\n          if (!metaData) return;\n          const { title, subCategories } = metaData;\n          const value = values[i];\n          const stat = subCategories ? subCategories[value] : value;\n          let status;\n          if (categoryIndex === i && result === 0) {\n            return (\n              <Table.Row warning key={category} onClick={() => onTurn(i)}>\n                <Table.Cell>{title}</Table.Cell>\n                <Table.Cell>{stat}</Table.Cell>\n                <Table.Cell><Icon name='checkmark' /></Table.Cell>\n              </Table.Row>\n            )\n          } else if (categoryIndex === i && result === player) {\n            return (\n              <Table.Row positive key={category} onClick={() => onTurn(i)}>\n                <Table.Cell>{title}</Table.Cell>\n                <Table.Cell>{stat}</Table.Cell>\n                <Table.Cell><Icon name='checkmark' /></Table.Cell>\n              </Table.Row>\n            )\n          } else if (categoryIndex === i && result !== player) {\n            return (\n              <Table.Row negative key={category} onClick={() => onTurn(i)}>\n                <Table.Cell>{title}</Table.Cell>\n                <Table.Cell>{stat}</Table.Cell>\n                <Table.Cell><Icon name='close' /></Table.Cell>\n              </Table.Row>\n            )\n          }\n          return (\n            <Table.Row key={category} onClick={() => onTurn(i)}>\n              <Table.Cell>{title}</Table.Cell>\n              <Table.Cell>{stat}</Table.Cell>\n              <Table.Cell></Table.Cell>\n            </Table.Row>\n          )\n        })}\n      </Table.Body>\n    </Table>\n  );\n}\n\nexport default App;\n\n//   { name: 'Captain Morgan', values: [45, 178, 60, 8] },\n//   { name: 'Will', values: [33, 188, 95, 9] },\n//   { name: 'Sunny', values: [37, 187, 0, -1] },\n//   { name: 'American Ben', values: [32, 185, 90, 8] },\n//   { name: 'Ant', values: [38, 187, 85, 6] },\n//   { name: 'Dan', values: [33, 170, 96, 7] },\n//   { name: 'Didun', values: [26, 171, 70, 8] },\n//   { name: 'Mike', values: [34, 172, 87, 1] },\n//   { name: 'Nick', values: [43, 188, 89, 5] },\n//   { name: 'Pierce', values: [42, 188, 55, 7] },\n//   { name: 'Rob', values: [42, 188, 52, 9] },\n//   { name: 'Scouse', values: [34, 188, 61, 8] },\n//   { name: 'Vinnie', values: [35, 173, 42, 7] },\n//   { name: 'Grant', values: [35, 44, 79, 9] },\n//   { name: 'Hitchy', values: [35, 45, 75, 3] },\n//   { name: 'Tom Ted', values: [35, 191, 91, 2] },\n//   { name: 'La Rocca Andy', values: [51, 178, 35, 8] },\n//   { name: 'Donald Trump', values: [73, 190, 20, 2] },\n//   { name: 'Adolf Hitler', values: [56, 160, 30, 5] },","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}