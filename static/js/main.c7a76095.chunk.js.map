{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["CATEGORIES","DATA","name","values","useGame","useState","currentPlayer","setCurrentPlayer","player1Stack","setPlayer1Stack","player2Stack","setPlayer2Stack","drawnStack","setDrawnStack","showCard","setShowCard","useEffect","numCards","length","Math","floor","random","i","index","splice","item","prevState","handleTurn","useCallback","categoryIndex","ms","Promise","resolve","setTimeout","then","alert","handleCards","player1Card","player2Card","player1Value","player2Value","_player1Stack","slice","_player2Stack","CardComponent","props","onTurn","Table","celled","selectable","unstackable","size","Header","Row","HeaderCell","colSpan","toUpperCase","Body","map","category","onClick","Cell","App","console","log","Container","categories","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c7a76095.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { Container, Label, Table, Icon } from 'semantic-ui-react';\n\ntype CategoryType = 'Age' | 'Height' | 'Strength' | 'Skill';\n\ntype CardType = {\n  name: string;\n  values: number[];\n}\n\nconst CATEGORIES: CategoryType[] = ['Age', 'Height', 'Strength', 'Skill'];\n\nconst DATA: CardType[] = [\n  { name: 'DT', values: [40, 188, 50, 10] },\n  { name: 'Captain Morgan', values: [45, 178, 60, 8] },\n  { name: 'Will', values: [33, 188, 95, 9] },\n  { name: 'Sunny', values: [37, 187, 0, -1] },\n  { name: 'American Ben', values: [32, 185, 90, 8] },\n  { name: 'Ant', values: [38, 187, 85, 6] },\n  { name: 'Dan', values: [33, 170, 96, 7] },\n  { name: 'Didun', values: [26, 171, 70, 8] },\n  { name: 'Mike', values: [34, 172, 87, 1] },\n  { name: 'Nick', values: [43, 188, 89, 5] },\n  { name: 'Pierce', values: [42, 188, 55, 7] },\n  { name: 'Rob', values: [42, 188, 52, 9] },\n  { name: 'Scouse', values: [34, 188, 61, 8] },\n  { name: 'Vinnie', values: [35, 173, 42, 7] },\n  { name: 'Grant', values: [35, 44, 79, 9] },\n  { name: 'Hitchy', values: [35, 45, 75, 3] },\n  { name: 'Tom Ted', values: [35, 191, 91, 2] },\n  { name: 'La Rocca Andy', values: [51, 178, 35, 8] },\n  { name: 'Donald Trump', values: [73, 190, 20, 2] },\n  { name: 'Adolf Hitler', values: [56, 160, 30, 5] },\n];\n\nfunction delay(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction useGame() {\n  const [currentPlayer, setCurrentPlayer] = useState<1 | 2>(1);\n  const [player1Stack, setPlayer1Stack] = useState<CardType[]>([]);\n  const [player2Stack, setPlayer2Stack] = useState<CardType[]>([]);\n  const [drawnStack, setDrawnStack] = useState<CardType[]>([]);\n  const [showCard, setShowCard] = useState<boolean>(false);\n\n  // Shuffle and setup each player decks\n  useEffect(() => {\n    const numCards = DATA.length / 2;\n    const index = Math.floor(Math.random() * numCards);\n    for (let i = 0; i < numCards; i++) {\n      const index = Math.floor(Math.random() * numCards);\n      const [item] = DATA.splice(index, 1);\n      setPlayer1Stack(prevState => [...prevState, item]);\n    }\n    setPlayer2Stack(DATA);\n  }, [])\n\n  const handleTurn = useCallback((categoryIndex: number) => {\n    setShowCard(true);\n    delay(3000).then(() => { \n      alert('Next turn?')\n      setShowCard(false);\n      handleCards(categoryIndex)\n    });\n  }, [player1Stack, player2Stack, drawnStack]);  \n    \n  const handleCards = useCallback((categoryIndex: number) => {\n    const player1Card = player1Stack[0];\n    const player2Card = player2Stack[0];\n    const player1Value = player1Card['values'][categoryIndex];\n    const player2Value = player2Card['values'][categoryIndex];\n    const _player1Stack = player1Stack.slice(1);\n    const _player2Stack = player2Stack.slice(1);\n\n    if (player1Value > player2Value) {\n      setPlayer1Stack([..._player1Stack, player2Card, player1Card, ...drawnStack]);\n      setPlayer2Stack([..._player2Stack]);\n      setDrawnStack([]);\n      setCurrentPlayer(1);\n    } else if (player1Value < player2Value) {\n      setPlayer1Stack([..._player1Stack]);\n      setPlayer2Stack([..._player2Stack, player2Card, player1Card, ...drawnStack]);\n      setDrawnStack([]);\n      setCurrentPlayer(2);\n    } else {\n      setPlayer1Stack([..._player1Stack]);\n      setPlayer2Stack([..._player2Stack]);\n      setDrawnStack([...drawnStack, player2Card, player1Card]);\n    }\n  }, [player1Stack, player2Stack, drawnStack])\n\n  return { currentPlayer, showCard, player1Stack, player2Stack, drawnStack, handleTurn }\n}\n\nfunction App() {\n\n  const { currentPlayer, showCard, player1Stack, player2Stack, drawnStack, handleTurn } = useGame();\n  console.log('1UP STACK', player1Stack);\n  console.log('2UP STACK', player2Stack);\n  console.log('DRAWN STACK', drawnStack);\n  if (player1Stack.length === 0 && player2Stack.length === 0) {\n    return (<h1>ITS A DRAW!</h1>);\n  }\n  if (player1Stack.length === 0) {\n    return (<h1>2UP WINS!</h1>);\n  }\n  if (player2Stack.length === 0) {\n    return (<h1>1UP WINS!</h1>);\n  }\n  return (\n    <Container>\n      <h1>Player 1 ({player1Stack.length} Cards)</h1>\n      {currentPlayer === 1 || showCard ? <CardComponent categories={CATEGORIES} onTurn={handleTurn} {...player1Stack[0]} /> : null}\n      <h1>Player 2 ({player2Stack.length} Cards)</h1>\n      {currentPlayer === 2 || showCard ? <CardComponent categories={CATEGORIES} onTurn={handleTurn} {...player2Stack[0]} /> : null}\n    </Container>\n  );\n}\n\ntype CardPropsType = CardType & {\n  categories: CategoryType[];\n  onTurn: (categoryIndex: number) => void;\n}\n\nfunction CardComponent(props: CardPropsType) {\n  const { name, values, onTurn } = props;\n  return (\n    <Table celled selectable unstackable size=\"small\">\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell colSpan='3'>{name.toUpperCase()}</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {CATEGORIES.map((category, i) => (\n          <Table.Row onClick={() => onTurn(i)}>\n            <Table.Cell>{category}</Table.Cell>\n            <Table.Cell>{values[i]}</Table.Cell>\n            <Table.Cell></Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}